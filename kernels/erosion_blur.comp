#version 450
layout (local_size_x = 32, local_size_y = 32) in;

layout (binding = 2, r32f) uniform image2D heightmap;
layout (binding = 3, r32f) uniform readonly image2D erosionmap;

// TODO: Configurable kernel size
const int KERNEL_SIZE = 4;
const int KERNEL_WIDTH = KERNEL_SIZE * 2 + 1;
const int KERNEL_AREA = KERNEL_SIZE * KERNEL_SIZE;

void main() {
    ivec2 img_pos = ivec2(gl_GlobalInvocationID.xy);
    ivec2 img_size = imageSize(erosionmap);
    float total = 0.;
    for (int x = -KERNEL_SIZE; x <= KERNEL_SIZE; x++) {
        for (int y = -KERNEL_SIZE; y <= KERNEL_SIZE; y++) {
            ivec2 kern_pos = ivec2(x, y);
            ivec2 img_pos_off = img_pos + kern_pos;

            if (any(greaterThan(img_pos_off, img_size)) || any(lessThan(img_pos_off, ivec2(0)))) continue;

            // TODO: Consistent depth falloff here
            float multiplier = max(0., float(KERNEL_SIZE) - length(kern_pos));
            total += imageLoad(erosionmap, img_pos_off).r * multiplier;
        }
    }
    total /= KERNEL_AREA;

    float height = imageLoad(heightmap, img_pos).r;
    height += total;
    imageStore(heightmap, img_pos, vec4(height, 0., 0., 0.));
}
