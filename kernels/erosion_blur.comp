#version 450
layout (local_size_x = 32, local_size_y = 32) in;

layout (binding = 2, r32f) uniform image2D heightmap;
layout (binding = 3, r32f) uniform readonly image2D erosionmap;

/*
layout (push_constant) uniform Direction {
    vec2 dir;
}

// https://github.com/amilajack/gaussian-blur/blob/master/src/5.glsl
float blur5(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {
    float accum = 0.0;
    vec2 off1 = vec2(1.3333333333333333) * direction;
    accum += texture2D(image, uv).r * 0.29411764705882354;
    accum += texture2D(image, uv + (off1 / resolution)).r * 0.35294117647058826;
    accum += texture2D(image, uv - (off1 / resolution)).r * 0.35294117647058826;
    return accum; 
}
*/

const int KERNEL_SIZE = 2;
const int KERNEL_WIDTH = KERNEL_SIZE * 2 + 1;
const int KERNEL_AREA = KERNEL_SIZE * KERNEL_SIZE;

void main() {
    ivec2 img_pos = ivec2(gl_GlobalInvocationID.xy);
    ivec2 img_size = imageSize(erosionmap);
    float total = 0.;
    for (int x = -KERNEL_SIZE; x <= KERNEL_SIZE; x++) {
        for (int y = -KERNEL_SIZE; y <= KERNEL_SIZE; y++) {
            ivec2 img_pos_off = img_pos + ivec2(x, y);
            if (any(greaterThan(img_pos_off, img_size)) || any(lessThan(img_pos_off, ivec2(0)))) continue;
            total += imageLoad(erosionmap, img_pos_off).r;
        }
    }
    total /= KERNEL_AREA;

    float height = imageLoad(heightmap, img_pos).r;
    height += total;
    imageStore(heightmap, img_pos, vec4(height, 0., 0., 0.));
}
