#version 450
layout (local_size_x = 32) in;

#include "droplet.glsl"

layout (binding = 0) uniform Settings {
    // Inertia
    float inertia;
    // Minimum slope for capacity calculation
    float min_slope;
    // Capacity for droplets to carry material
    float capacity_const;
    // Sediment dropped beyond capacity
    float deposition;
    // Sediment picked up under capacity
    float erosion;
    // Force of gravity
    float gravity;
    // Evaporation rate
    float evaporation;
};

layout (binding = 1) buffer Droplets {
    Droplet droplets[];
};

layout (binding = 2, r32f) uniform image2D heightmap;
layout (binding = 3, r32f) uniform image2D erosionmap;

vec2 gradient(vec2 pos) {
    ivec2 int_pos = ivec2(pos);
    vec2 uv = fract(pos);
    float tl = imageLoad(heightmap, int_pos + ivec2(0, 0)).r;
    float tr = imageLoad(heightmap, int_pos + ivec2(1, 0)).r;
    float bl = imageLoad(heightmap, int_pos + ivec2(0, 1)).r;
    float br = imageLoad(heightmap, int_pos + ivec2(1, 1)).r;
    return vec2(
        mix(tr - tl, br - bl, uv.y),
        mix(bl - tl, br - tr, uv.x)
    );
}

// Particles on a gradient with magnitude less than this will be re-initialized
const float GRADIENT_KILLZONE = 0.0005;
const float SPEED = 1. / 1000.;
const float SEDIMENT_RATE = SPEED;

void main() {
    // Image positioning
    uint gid = gl_GlobalInvocationID.x;
    ivec2 img_size = imageSize(heightmap);
    vec2 old_img_pos = droplets[gid].pos * img_size;

    // Calculate gradient and re-init if dead
    vec2 grad = gradient(old_img_pos);
    bool gradient_kill = length(grad) < GRADIENT_KILLZONE;
    bool bounds_check_fail = any(greaterThan(old_img_pos, img_size)) || any(lessThan(old_img_pos, ivec2(0)));
    if (gradient_kill || bounds_check_fail) {
        droplets[gid] = init_droplet(old_img_pos + gid);
        return;
    }
    grad = -normalize(grad);

    // Update position
    vec2 dir = mix(grad, droplets[gid].dir, inertia);
    vec2 new_pos = droplets[gid].pos + dir * SPEED;
    droplets[gid].pos = new_pos;
    vec2 new_img_pos = new_pos * img_size;

    // Calculate height diff
    float height_old = imageLoad(heightmap, ivec2(old_img_pos)).x;
    float height_new = imageLoad(heightmap, ivec2(droplets[gid].pos)).x;
    float height_diff = height_new - height_old;

    // Calculate capacity
    float capacity = 
        max(-height_diff, min_slope)
        * droplets[gid].vel
        * droplets[gid].water
        * capacity_const;
    
    // Calculate sediment diff
    float sediment_diff = 0.;
    if (droplets[gid].sediment > capacity) {
        sediment_diff = (droplets[gid].sediment - capacity) * deposition;
    } else {
        sediment_diff = -min((capacity - droplets[gid].sediment) * erosion, -height_diff);
    }
    droplets[gid].sediment -= sediment_diff;

    imageStore(erosionmap, ivec2(old_img_pos), vec4(SEDIMENT_RATE * sediment_diff));

    // Calculate new velocity 
    droplets[gid].vel = sqrt(pow(droplets[gid].vel, 2) + height_diff * gravity);

    // Calculate evaporation 
    droplets[gid].water *= 1. - evaporation;
}
